{"version":3,"sources":["JPTransformer.js","JPHomePage.jsx","serviceWorker.js","index.js"],"names":["JPTransformer","formatPropTypes","data","JSON","stringify","replace","formatDefaultPropTypes","convertJsonToPropTypes","sourceText","str","parse","e","isValidJSONString","Object","keys","length","propTypesForObject","propTypes","defaultPropTypes","propTypesCopy","defaultPropTypesCopy","key","value","firstPropType","firstDefaultPropType","Array","isArray","first","restData","reduce","acc","next","TextArea","Input","Title","Typography","Header","Layout","Content","Footer","JPHomePage","useState","setSourceText","propTypeText","setPropTypeText","style","backgroundColor","span","marginTop","marginRight","marginLeft","gutter","justify","align","rows","onChange","target","type","shape","onClick","propsTypeTextDisplay","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11d267d7.chunk.js","sourcesContent":["\nconst isValidJSONString = (str) => {\n  try {\n    JSON.parse(str)\n  } catch (e) {\n    return false\n  }\n  return true\n}\n\nconst formatPropTypes = (data) => JSON.stringify(data, null, 4)\n  .replace(/\"/gi, '')\n  .replace(/\\[/gi, 'PropTypes.arrayOf(')\n  .replace(/PropTypes.arrayOf\\(\\n {7} {/gi, 'PropTypes.arrayOf(\\n       PropTypes.shape({')\n  .replace(/\\]/gi, ')')\n  .replace(/: {/gi, ': PropTypes.shape({')\n  .replace(/}\\n/gi, '},')\n  .replace(/},/gi, '}),')\n  .replace(/}\\),\\n {4}\\),/gi, '}),\\n')\n  .replace(/}\\), {12}}\\),/gi, '}),\\n            }),')\n  .replace(/}\\), {4}\\),/gi, '}),\\n    ),')\n\nconst formatDefaultPropTypes = (data) => JSON.stringify(data, null, 4)\n  .replace(/\"/gi, '')\n\nconst propTypesForObject = (\n  propTypes = {},\n  defaultPropTypes = {},\n  data = {},\n) => {\n  if (!data\n    || !Object.keys(data)\n    || !Object.keys(data).length) {\n    return [\n      propTypes,\n      defaultPropTypes,\n    ]\n  }\n  const propTypesCopy = {\n    ...propTypes,\n  }\n  const defaultPropTypesCopy = {\n    ...defaultPropTypes,\n  }\n  const key = Object.keys(data)[0]\n  const value = data[key]\n\n  if (typeof value === 'string') {\n    defaultPropTypesCopy[key] = null\n    propTypesCopy[key] = 'PropTypes.string'\n  }\n\n  if (typeof value === 'number') {\n    defaultPropTypesCopy[key] = 0\n    propTypesCopy[key] = 'PropTypes.number'\n  }\n\n  if (typeof value === 'boolean') {\n    defaultPropTypesCopy[key] = false\n    propTypesCopy[key] = 'PropTypes.bool'\n  }\n\n  if (typeof value === 'object') {\n    const [\n      firstPropType,\n      firstDefaultPropType,\n    ] = propTypesForObject(\n      {},\n      {},\n      value,\n    )\n    defaultPropTypesCopy[key] = firstDefaultPropType\n    propTypesCopy[key] = firstPropType\n  }\n\n  if (value && Array.isArray(value)) {\n    const [\n      first,\n    ] = value\n\n    defaultPropTypesCopy[key] = []\n    if (typeof first === 'string') {\n      propTypesCopy[key] = ['PropTypes.string']\n    }\n\n    if (typeof first === 'number') {\n      propTypesCopy[key] = ['PropTypes.number']\n    }\n\n    if (typeof first === 'boolean') {\n      propTypesCopy[key] = ['PropTypes.bool']\n    }\n\n    if (typeof first === 'object') {\n      const [\n        firstPropType,\n      ] = propTypesForObject(\n        {},\n        {},\n        first,\n      )\n      propTypesCopy[key] = [firstPropType]\n    }\n  }\n\n  const restData = Object.keys(data).reduce((acc, next) => {\n    if (next !== key) {\n      return {\n        ...acc,\n        [next]: data[next],\n      }\n    }\n    return acc\n  }, {})\n  return propTypesForObject(\n    propTypesCopy,\n    defaultPropTypesCopy,\n    restData,\n  )\n}\n\nconst convertJsonToPropTypes = (sourceText) => {\n  if (!isValidJSONString(sourceText)) return null\n\n  const data = JSON.parse(sourceText)\n\n  // a valid json string :\n  // {\"isConnected\": true} => the minimal valid json\n  // parent node must be an object\n  // propTypes are object, we should have :\n  // {\"user\" :  {\"name\": \"XXX\"}} or {\"users\": [{\"user\" :  {\"name\": \"XXX\"}}]}\n  // or\n  /* {\n    \"users\": [{\n      \"user\": {\n        \"name\": \"XXX\"\n      }\n    }],\n    \"isEmpty\": false\n   } */\n  // or {notes: [\"AA\", \"BBB\"]} or {notes: [1, 2]}\n  // we take first element and check it type\n  if (!data\n      || typeof data !== 'object'\n      || !Object.keys(data)\n      || !Object.keys(data).length) {\n    return null\n  }\n\n  // propTypes object\n  return propTypesForObject({}, {}, data)\n}\n\n\nconst JPTransformer = {\n  formatPropTypes,\n  formatDefaultPropTypes,\n  convertJsonToPropTypes,\n}\n\nexport default JPTransformer\n","import React, { useState } from 'react'\nimport 'antd/dist/antd.css'\nimport {\n  Button,\n  Input,\n  Layout,\n  Row,\n  Col,\n  Typography,\n} from 'antd'\nimport JPTransformer from './JPTransformer'\n\nconst {\n  formatPropTypes,\n  formatDefaultPropTypes,\n  convertJsonToPropTypes,\n} = JPTransformer\n\nconst {\n  TextArea,\n} = Input\n\nconst {\n  Title,\n} = Typography\n\nconst {\n  Header,\n  Content,\n  Footer,\n} = Layout\n\n\nconst JPHomePage = () => {\n  const [sourceText, setSourceText] = useState()\n  const [propTypeText, setPropTypeText] = useState()\n  return (\n    <>\n      <Layout>\n        <Header\n        style={{ backgroundColor : 'white'}}\n        >\n          <Row>\n            <Col span={24}>\n              <Title>\n                Json to PropTypes\n              </Title>\n            </Col>\n          </Row>\n        </Header>\n        <Content style={{\n          marginTop: '1rem',\n          marginRight: '1rem',\n          marginLeft: '1rem',\n        }}\n        >\n          <Row\n            gutter={16}\n            justify=\"center\"\n            align=\"middle\"\n          >\n            <Col\n              span={10}\n            >\n              <TextArea\n                rows={25}\n                value={sourceText}\n                onChange={({ target: { value } }) => setSourceText(value)}\n              />\n            </Col>\n            <Col\n              span={2}\n            >\n              <Button\n                type=\"danger\"\n                shape=\"round\"\n                onClick={() => {\n                  const propTypes = convertJsonToPropTypes(sourceText)\n                  const propsTypeTextDisplay = `\nimport PropTypes from 'prop-types'\n\n// propsType (validation)\nMyComponent.propTypes = ${formatPropTypes(propTypes[0])}\n\n// default props\nMyComponent.defaultProps = ${formatDefaultPropTypes(propTypes[1])}\n                  `\n                  setPropTypeText(propsTypeTextDisplay)\n                }}\n              >\n                Convert\n              </Button>\n            </Col>\n            <Col\n              span={10}\n            >\n              <TextArea\n                rows={25}\n                value={propTypeText}\n              />\n            </Col>\n          </Row>\n        </Content>\n        <Footer />\n      </Layout>\n    </>\n  )\n}\n\n// propsType (validation)\nJPHomePage.propTypes = {\n\n}\n\n// default props\nJPHomePage.defaultProps = {\n\n}\n\nexport default JPHomePage\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JPHomePage from './JPHomePage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <JPHomePage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}